import os
import cx_Oracle
import pandas as pd
import numpy as np
import math

# visualization
# %matplotlib inline only for notebook tools
import seaborn as sns
import matplotlib.pyplot as plt

# os.environ['NLS_LANG'] = 'SIMPLIFIEDÂ CHINESE_CHINA.UTF8'
# os.environ['NLS_LANG'] = 'SIMPLIFIED CHINESE_SINGAPORE.ZHT16GBK'
# os.environ['NLS_LANG'] = 'AMERICAN_AMERICA.WE8MSWIN1252'
os.environ['NLS_LANG'] = 'ENGLISH_UNITED KINGDOM.AL32UTF8'

# sns.set_style('whitegrid',{'font.sans-serif':['simhei','Arial']})
sns.set_style('whitegrid',{'font.sans-serif':['Arial','Arial']})

# Oracle client environment variable
os.putenv('ORACLE_HOME', "C:\\app\oracle\\client11g\\product\\11.2.0\\client_2")
os.putenv('LD_LIBRARY_PATH', "C:\\app\\oracle\\client11g\\product\\11.2.0\\client_2\\lib")

# connect security information

user_id = 'APAC_FIN_COMP_MART'
pass_wd = 'not_apac_fin_comp'

# user_id = 'APAC_FIN_COMP_CORE'
# pass_wd = 'not_apac_fin_comp'

# Workflow data which is in another schema
# user_id = 'APAC_CONCUR_CORE'
# pass_wd = 'not_apac_concur'

# GODW server tns
dsn_tns = cx_Oracle.makedsn('exak-scan.kau.roche.com', 15210, service_name='OTHER_GODWP.KAU.ROCHE.COM')

connection = cx_Oracle.connect(user_id, pass_wd, dsn_tns)

'''
Schema	PROD_APAC_FIN_COMP_MART
Usage for	Yellow flag
Table Name	                Description
DM_F_YF_CM_SRC	            yellow flag fact table
DM_F_CORP_CRDT_CRD_MSTR	    Credit card details
DM_F_RG_MT_BLACK_LIST_YF	Black list venue
'''

# read metadata of oracle
# SQL = "select tablespace_name, table_name from user_tables"
# cursor = connection.cursor()
# cursor.execute(SQL)
# for row in cursor:
#     print(row)
# cursor.close()

"""
Yellow flag table contain 626811 records for 1753
In the table, the latest report date is 2017-5-29
"""

SQL = "select count(1) from DM_F_YF_CM_SRC where COMPANY_CODE = '1753' FETCH FIRST 50 ROWS ONLY"
df_ora = pd.read_sql(SQL, con=connection)
print(df_ora)

# SQL = "select distinct(report_date) from DM_F_YF_CM_SRC where COMPANY_CODE = '1753' order by REPORT_DATE"
# cursor = connection.cursor()
# cursor.execute(SQL)
# result = cursor.fetchall()
# cursor.close()
# print(result)

SQL = "select distinct(report_date) from DM_F_YF_CM_SRC where COMPANY_CODE = '1753' order by REPORT_DATE"
df_ora = pd.read_sql(SQL, con=connection)
print(df_ora)

# Column information of the table
"""
Column_Names				Column_Description
DWH_ID				        Surrogate key generated by ETL
EXP_TYPE				    Expense types - ex :- Taxi , meals, Hotels, Dinnererc
EMPLOYEE_NAME				Claimant Name
EMPLOYEE_ID				    Claimant ID
EMPLOYEE_COUNTRY_CODE		Claimant company code - roche centers in different country - ex:- CN for china , HK for hong kong , IN for india etc..
RPT_NAME				    Claim Name as per oncur
COMPANY_NAME				roche center names , Multiple company names can belong under single country code as there can be more than one center in one country
RPT_COUNTRY_CODE			same as employee country code
COMPANY_CODE				codes for company name
RPT_CC_CODE		    		NA
RPT_LEGACY_KEY				Claim ID
RPT_ID				        Claim key (equivalent to claim ID)
FIRST_SUBMITTED_DATE		The date when claim is first submitted
LAST_SUBMITTED_DATE			The date on which the claim is re-submitted after rejection
IS_SENT_BACK				flag to check weather a claim is sent back to employee or not
SENT_BACK_CODE				sent back reason code
SENT_BACK_TEXT				sent back reason
APPROVAL_STATUS				status of claim approval
PAYMENT_DATE				date on which payment made for the claim
TRANSACTION_NO				line items under each claim
ORG_5_NAME				    NA
ORG_5_CODE				    NA
PEER_ID				        Peer ID
T_DATE				        Date on which transaction happens on a line item , ex :- Date of dinner or breakfast etc..
PAYMENT_TYPE				which payment method is used , Credit card of Cash.
VENDOR				        vendor
LOCATION				    Location where transaction took place
T_CURRENCY				    Currency on which transaction happened
T_AMT				        Amount of transaction
RATE				        Rate of conversion for transaction currency and reimbursement currency
REIMBUR_CURRENCY			Currency on which payment made to the claimant
REIMBUR_AMT				    Amount of reimbursement paid to the claimant
CLAIMED_AMT				    Total amount claimed for a claim(Sum of all transaction amount in a claim)
APPROVED_AMT				The approved amount for each line item
INVOICE_NUMBER				invoice number for line items
CHRIS_ID				    HR id
REPORT_DATE				    Date on which report is generated for the compliance team
PERSONAL				    flag to mark personal expenses
REROUTE_CLAIM_FLAG			NA
"""

# import 1753 data to dataframe
SQL = """
Select
        EXP_TYPE                ,
        EMPLOYEE_NAME           ,
        EMPLOYEE_ID             ,
        EMPLOYEE_COUNTRY_CODE   ,
        RPT_NAME                ,
        COMPANY_NAME            ,
        RPT_COUNTRY_CODE        ,
        COMPANY_CODE            ,
        RPT_CC_CODE             ,
        RPT_LEGACY_KEY          ,
--        RPT_ID                  ,
        FIRST_SUBMITTED_DATE    ,
        LAST_SUBMITTED_DATE     ,
--       IS_SENT_BACK            ,
        SENT_BACK_CODE          ,
--      SENT_BACK_TEXT          ,
        APPROVAL_STATUS         ,
        PAYMENT_DATE            ,
        TRANSACTION_NO          ,
        ORG_5_NAME              , -- Org information
--        ORG_5_CODE              ,
--        PEER_ID                 ,
        T_DATE                  ,
        PAYMENT_TYPE            ,
        VENDOR                  ,
        LOCATION                ,
        T_CURRENCY              ,
        T_AMT                   ,
        RATE                    ,
        REIMBUR_CURRENCY        ,
        REIMBUR_AMT             ,
        CLAIMED_AMT             ,
        APPROVED_AMT            ,
        INVOICE_NUMBER          ,
        CHRIS_ID                ,
        REPORT_DATE             ,
        PERSONAL                ,
        REROUTE_CLAIM_FLAG   
       from DM_F_YF_CM_SRC where COMPANY_CODE = '1753'
       FETCH FIRST 50000 ROWS ONLY
      """

DM_F_YF_CM_SRC_DF = pd.read_sql(SQL, con=connection)
print(DM_F_YF_CM_SRC_DF.head())

# location master file
location_file = './Data/city.xls'
location_df = pd.read_excel(location_file, sheetname="city")
location_df = location_df[['CITY_NAME_ST', 'CITY_NAME_EN', 'CITY_TIER']]

"""

Data Transforming

Row Data:
DM_F_YF_CM_SRC_DF: table DM_F_YF_CM_SRC, the yellow flag table
location_df: excel file for location master data, like chinese & english name

To be build:
yf_df: based on DM_F_YF_CM_SRC_DF join with master data: location. 

"""

# Translate CHINESE to English

yf_df = DM_F_YF_CM_SRC_DF

yf_df = yf_df.join(location_df.set_index('CITY_NAME_ST'), on='LOCATION')

yf_df[['LOCATION', 'CITY_NAME_EN']].fillna(0).apply(lambda x: x['CITY_NAME_EN']==0 , axis=1)

yf_df['LOCATION_EN'] = yf_df[['LOCATION', 'CITY_NAME_EN']].fillna(0).apply(lambda x:
    str(x['LOCATION']).upper() if x['CITY_NAME_EN'] == 0 else x["CITY_NAME_EN"], axis=1)

#DM_F_YF_CM_SRC_DF = DM_F_YF_CM_SRC_DF.drop(['LOCATOIN_EN'], axis=1)

"""

Data Understanding

"""

# data frame analysis
DM_F_YF_CM_SRC_DF.info()
DM_F_YF_CM_SRC_DF.describe()
Result = DM_F_YF_CM_SRC_DF.describe()

Result = DM_F_YF_CM_SRC_DF.describe(include=['O'])

# copy dataframe to excel by clipboard
pd_Result = pd.DataFrame(Result)
pd_Result.to_clipboard()
pd_Result.T

# check for NAs in sense Pandas understands them
DM_F_YF_CM_SRC_DF.isnull().sum()

# Understand EXP_TYPE

DM_F_YF_CM_SRC_DF[['EXP_TYPE','T_AMT']].groupby(['EXP_TYPE'], as_index=False).count().sort_values(by='T_AMT', ascending=False)

DM_F_YF_CM_SRC_DF[['EXP_TYPE','T_AMT']].groupby(['EXP_TYPE'], as_index=False).agg([np.sum, np.size, np.std, np.mean])

# Select exp_type with record number > 1000
Result = DM_F_YF_CM_SRC_DF[['EXP_TYPE','T_AMT']].groupby(['EXP_TYPE'], as_index=True).describe()
Result = DM_F_YF_CM_SRC_DF[['EXP_TYPE','T_AMT']].groupby(['EXP_TYPE'], as_index=True).describe()
List = Result['T_AMT'][Result['T_AMT']['count']>1000].index.tolist()

"""
['Business Meal with HCPs',
 'Congress (CAMAC/Sales)',
 'Dinner',
 'Hotel',
 'Lunch',
 'Mobile/Cellular Phone',
 'Public Transport',
 'Taxi',
 'Tolls/Road Charges',
 'Train']
"""

# Only use >1000 record expend type.
DM_F_YF_CM_SRC_DF[DM_F_YF_CM_SRC_DF.EXP_TYPE.isin(List)]

# visualize the amt distribution by different exp_type
g = sns.FacetGrid(yf_df[yf_df.EXP_TYPE.isin(List)], col='EXP_TYPE', col_wrap=3, size=4.5)
g.map(plt.hist, 'T_AMT', bins=4)

g = sns.FacetGrid(DM_F_YF_CM_SRC_DF[DM_F_YF_CM_SRC_DF.EXP_TYPE=='Lunch'], col='EXP_TYPE', col_wrap=3)
g.map(plt.hist, 'T_AMT', bins=4)

# boxplot
plt.figure(figsize=[16,12])

plt.subplot(231)
plt.boxplot(yf_df[yf_df.EXP_TYPE=='Lunch']['T_AMT'], showmeans = True, meanline = True)
plt.title('Lunch Boxplot')
plt.ylabel('# of Clarm')

plt.subplot(232)
plt.boxplot(yf_df[(yf_df.EXP_TYPE=='Dinner') & (yf_df.T_AMT>=-1000)]['T_AMT'],
            showmeans = True, meanline = True)
plt.title('Dinner Boxplot')
plt.ylabel('Amount')

plt.subplot(234)
plt.hist(yf_df[yf_df.EXP_TYPE=='Lunch']['T_AMT'], bins=20)
plt.title('Lunch Hist')
plt.ylabel('# of Clarm')

plt.subplot(235)
plt.hist(yf_df[(yf_df.EXP_TYPE=='Dinner') & (yf_df.T_AMT>=-1000)]['T_AMT'], bins=20)
plt.title('Dinner Hist')
plt.ylabel('# of Clarm')

plt.subplot(233)
plt.boxplot(yf_df[(yf_df.EXP_TYPE=='Dinner') &
                  (yf_df.T_AMT>=-1000) &
                  (yf_df.T_AMT<=3000)]['T_AMT'],
            showmeans = True, meanline = True)
plt.title('Dinner Boxplot')
plt.ylabel('Amount')

plt.subplot(236)
plt.hist(yf_df[(yf_df.EXP_TYPE=='Dinner') &
               (yf_df.T_AMT>=-1000) &
               (yf_df.T_AMT<=3000)]['T_AMT'], bins=20)
plt.title('Dinner Hist')
plt.ylabel('# of Clarm')

# compare between exp_type

# fig, saxis = plt.subplots(2, 2,figsize=(16,12))
#
# sns.barplot(y = 'EXP_TYPE', x = 'T_AMT', data=yf_df[yf_df.EXP_TYPE.isin(List)]
#             , ax = saxis[0,0], ci="sd")
# sns.barplot(y = 'EXP_TYPE', x = 'T_AMT', data=yf_df[yf_df.EXP_TYPE.isin(List)]
#             , ax = saxis[0,1], ci=99.99)
#
# sns.pointplot(y = 'EXP_TYPE', x = 'T_AMT',  data=yf_df[yf_df.EXP_TYPE.isin(List)]
#               , ax = saxis[1,0], ci=99.9999)
# sns.pointplot(y = 'EXP_TYPE', x = 'T_AMT',  data=yf_df[yf_df.EXP_TYPE.isin(List)]
#               , ax = saxis[1,1])

fig, saxis = plt.subplots(4, 1,figsize=(13,26))

sns.barplot(y = 'EXP_TYPE', x = 'T_AMT', data=yf_df[yf_df.EXP_TYPE.isin(List)], ax = saxis[0], ci="sd")
sns.barplot(y = 'EXP_TYPE', x = 'T_AMT', data=yf_df[yf_df.EXP_TYPE.isin(List)], ax = saxis[1], ci=99.99)
sns.pointplot(y = 'EXP_TYPE', x = 'T_AMT',  data=yf_df[yf_df.EXP_TYPE.isin(List)], ax = saxis[2], ci=99.9999)
sns.pointplot(y = 'EXP_TYPE', x = 'T_AMT',  data=yf_df[yf_df.EXP_TYPE.isin(List)], ax = saxis[3])


#plot distributions of Age of passengers who survived or did not survive

food_related_df = yf_df[(yf_df.EXP_TYPE=='Dinner') &
                              (yf_df.T_AMT>=-1000) &
                              (yf_df.T_AMT<=3000)]

food_related_df = food_related_df.append(yf_df[(yf_df.EXP_TYPE=='Lunch')], ignore_index=True)
food_related_df[['EXP_TYPE','T_AMT']].head()

a = sns.FacetGrid( food_related_df, hue = 'EXP_TYPE', aspect=2 , size=6)
a.map(sns.kdeplot, 'T_AMT', shade= True )
a.set(xlim=(food_related_df['T_AMT'].min(), food_related_df['T_AMT'].max()), ylim=(-0.001,0.008))
a.add_legend()


# Org information
DM_F_YF_CM_SRC_DF[['ORG_5_NAME','T_AMT']].groupby(['ORG_5_NAME'], as_index=True).describe()

# plot distributions of Age of passengers who survived or did not survive
data_tmp = DM_F_YF_CM_SRC_DF[(DM_F_YF_CM_SRC_DF.EXP_TYPE=='Dinner') &
                              (DM_F_YF_CM_SRC_DF.T_AMT>=-1000) &
                              (DM_F_YF_CM_SRC_DF.T_AMT<=3000)]

data_tmp.info()

data_tmp.append(DM_F_YF_CM_SRC_DF[(DM_F_YF_CM_SRC_DF.EXP_TYPE=='Lunch')], ignore_index=True)

data_tmp[['EXP_TYPE','T_AMT']].groupby(['EXP_TYPE'], as_index=True).describe()

data_tmp[['LOCATION_EN','T_AMT']].groupby(by='LOCATION_EN').count().sort_values(by='T_AMT', ascending=False)

# Check exp vs location

LOCATION_DF = DM_F_YF_CM_SRC_DF[['LOCATION_EN','T_AMT']].groupby(['LOCATION_EN'], as_index=False).count().\
    sort_values(by='T_AMT', ascending=False)

Result = DM_F_YF_CM_SRC_DF[['LOCATION_EN','T_AMT']].groupby(['LOCATION_EN'], as_index=True).describe()
location_list = Result['T_AMT'][Result['T_AMT']['count']>100].index.tolist()

plt.barplot(LOCATION_DF)

exp_type_list = ['Dinner','Lunch']
location_list = ['SHANGHAI', 'BEIJING', 'HANGZHOU', 'GUANGZHOU' ]

h = sns.FacetGrid(DM_F_YF_CM_SRC_DF[DM_F_YF_CM_SRC_DF.LOCATION_EN.isin(location_list) &
                                    DM_F_YF_CM_SRC_DF.EXP_TYPE.isin(exp_type_list)],
                  row='LOCATION_EN',
                  col='PAYMENT_TYPE', hue='EXP_TYPE', aspect=2)
h.map(plt.hist, 'T_AMT', alpha = .5)
h.add_legend()

# Visualize the data of Location vs Exp type
fig, saxis = plt.subplots(4, 1,figsize=(13,26))

# sns.barplot(y = 'EXP_TYPE', x = 'T_AMT', data=yf_df[yf_df.EXP_TYPE.isin(List)], ax = saxis[0], ci="sd")
plt.hist(x='T_AMT', data=yf_df[yf_df.LOCATION_EN.isin(location_list) & yf_df.EXP_TYPE.isin(exp_type_list)], ax = saxis[0])



# Close the oracle db connection
connection.close()


